import { EventEmitter } from 'events';
import { Store } from '../Store/Store';
import { FluxAction, FluxMiddlewareType, FluxOptions } from '../types/flux';
export declare class FluxFramework extends EventEmitter {
    isInit: boolean;
    pluginTypes: string[];
    private state;
    private storeClasses;
    private defaultOptions;
    private middleware;
    private options;
    constructor();
    addMiddleware(middleware: FluxMiddlewareType[]): void;
    clearAppData(): Promise<boolean>;
    clearMiddleware(): boolean;
    removeStores(storeNames: string[]): void;
    deregisterStores(storeNames: string[]): void;
    dispatch(action: FluxAction, silent?: boolean): Promise<FluxAction>;
    getClass(name?: string): Store;
    getOptions(): FluxOptions;
    getState(path?: string | string[], defaultValue?: any): any;
    getStore(path?: string | string[], defaultValue?: any): any;
    init(options?: FluxOptions, reset?: boolean): Promise<void>;
    onInit(listener: (...args: any[]) => void): void;
    offInit(listener: (...args: any[]) => void): void;
    off(eventType: string, listener: (...args: any[]) => void): this;
    on(eventType: string, listener: (...args: any[]) => void): this;
    addStores(stores: any[]): Promise<object[]>;
    registerStores(stores: any[]): Promise<object[]>;
    removeMiddleware(names: string[]): void;
    reset(clearStorage?: boolean): Promise<void>;
    setState(path: string | string[], value: any): Promise<boolean>;
    setStore(path: string | string[], value: any): Promise<boolean>;
    private addPlugin;
    private deregister;
    private register;
    private removePlugin;
    private updateStorage;
    private useStorage;
}
export declare const Flux: FluxFramework;
